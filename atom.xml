<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ne2der</title>
  <subtitle>Know Yourself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ne2der.github.io/"/>
  <updated>2017-05-19T05:14:14.729Z</updated>
  <id>http://ne2der.github.io/</id>
  
  <author>
    <name>ne2der</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>syscalltable hook for Android arm64</title>
    <link href="http://ne2der.github.io/2017/05/13/syscalltable-hook-for-Android-arm64/"/>
    <id>http://ne2der.github.io/2017/05/13/syscalltable-hook-for-Android-arm64/</id>
    <published>2017-05-13T05:55:21.000Z</published>
    <updated>2017-05-19T05:14:14.729Z</updated>
    
    <content type="html"><![CDATA[<p>终于克服了拖延症写下了第一笔，前段时间看了<a href="https://www.vantagepoint.sg/blog/82-hooking-android-system-calls-for-pleasure-and-benefit" target="_blank" rel="external">Hooking Android System Calls for Pleasure and Benefit</a>，于是就自己尝试着写了一下，综合了其他的思路改用动态获取sys_call_table的方法。思路简单，主要记录下遇到的问题。</p>
<h2 id="定制内核"><a href="#定制内核" class="headerlink" title="定制内核"></a>定制内核</h2><p>首先，为了必须使Kernel支持LKM，上文中给出的方法是在编译内核make defconfig之后，修改源码目录中的.config文件。这种方法修改的选项make时会被override。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scripts/kconfig/conf --silentoldconfig Kconfig</div><div class="line">.config:214:warning: override: reassigning to symbol MODULES</div><div class="line">#</div><div class="line"># configuration written to .config</div><div class="line">#</div></pre></td></tr></table></figure></p>
<p>回去看.config文件的已经被恢复，实际上选项并没有生效。更简单的方法是修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arch/platform(arm/arm64/……)/Kconfig</div></pre></td></tr></table></figure></p>
<p>在其中将MODULES，MODULE_UNLOAD添加到default y项中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">config ARM</div><div class="line">        bool</div><div class="line">        default y</div><div class="line">        select MODULES</div><div class="line">        select MODULE_UNLOAD</div><div class="line">        select ARCH_BINFMT_ELF_RANDOMIZE_PIE</div><div class="line">        select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE</div><div class="line">        select ARCH_HAVE_CUSTOM_GPIO_H</div><div class="line">        select ARCH_HAS_TICK_BROADCAST if GENERIC_CLOCKEVENTS_BROADCAST</div><div class="line">        select ARCH_WANT_IPC_PARSE_VERSION</div><div class="line">        ……</div><div class="line">        ……</div></pre></td></tr></table></figure></p>
<h2 id="定位sys-call-table"><a href="#定位sys-call-table" class="headerlink" title="定位sys_call_table"></a>定位sys_call_table</h2><p>sys_call_table地址的获取方法有多种，如上文采用的/proc/kallsym读取的方法，还以从system.map读。这些方法原理已经已经很多，就不多说了。<br>这里我采用的是用sys_close偏移定位的方法。这种方法的原理是从PAGE_OFFSET开始暴力查找，从每一个地址找NR_close偏移处存储的是否是sys_close来判断当前地址是否是sys_call_table。测试过程中arm一切正常，但是在arm64下却会crash。经过一段时间的排查发现。arm64下由于进行arm兼容，多了一张compat_sys_call_table的表。在内存中它们的位置关系如下。<br><img src="/images/syscalltable_hook_for_Android_arm64_syscallmemory.png" alt="compat_sys_call_in_memory"><br>两张表中存储sys_close的相同，查找程序会先找到compat表中的sys_close,并且由于arm与arm64的系统调用号不同(查看对应的unistd.h确定)，所以找到的地址既不是compat_sys_call_table也不是sys_call_table。根据内存的情况，扩展原来的定位方法，首先用arm的调用号确定compat_sys_call_table地址，在跳过这个地址继续暴力查找，用arm64的调用号确定sys_call_table的地址。</p>
<p>测试环境：android kernel 3.10 arm64<br>丑陋Code：<a href="https://github.com/ne2der/ASyScallHookFrame" target="_blank" rel="external">ASyScallHookFrame</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于克服了拖延症写下了第一笔，前段时间看了&lt;a href=&quot;https://www.vantagepoint.sg/blog/82-hooking-android-system-calls-for-pleasure-and-benefit&quot; target=&quot;_blank&quot; 
    
    </summary>
    
    
      <category term="Android" scheme="http://ne2der.github.io/tags/Android/"/>
    
      <category term="HOOK" scheme="http://ne2der.github.io/tags/HOOK/"/>
    
      <category term="ARM64" scheme="http://ne2der.github.io/tags/ARM64/"/>
    
  </entry>
  
</feed>
